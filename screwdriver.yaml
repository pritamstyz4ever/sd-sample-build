shared:
    image: node:lts
    # settings:
    #     slack:
    #         channels:
    #             - "sd-builds-local"
    #         statuses:
    #             - SUCCESS
    #             - FAILURE
    #             - ABORTED
    #             - QUEUED
    #             - RUNNING
# # childPipelines:
#     scmUrls:
#         - git@github.com:pritamstyz4ever/sd-build-box.git
jobs:
    main:
        requires: [~pr, ~commit]
        steps:
            - s1: echo "Hello"
            - s2: echo "World"
            - s3: echo $PR_BRANCH_NAME
            - test-set: set

    frozen:
        requires: main
        steps:
            - s1: |
                  echo "Hello World"
                  meta set label VERSION_0.0
            - s2: |
                  meta get label
        freezeWindows:
            - "* 19-20 ? * FRI"
    success:
        requires: main
        environment:
            DEPLOY_ENV: dev
        # annotations:
        #     screwdriver.cd/terminationGracePeriodSeconds: "110"
        steps:
            - init: |
                  echo $DEPLOY_ENV > test.log
                  cp test.log $SD_ARTIFACTS_DIR/test.log
                  export ENV_VAR_TEST="somevalue"
            - wait: |
                  export ENV_VAR_TEST1="anotherone"
                  sleep 2m
            - deploy: |
                  echo "deploy"
                  echo $ENV_VAR_TEST
            - teardown-step1: |
                  env
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST
                  echo "Hello world" > user.log
                  cp user.log $SD_ARTIFACTS_DIR/user.log
                  cat /tmp/env_export || echo "does not exist"
            - teardown-step2: |
                  env
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST $ENV_VAR_TEST1
                  echo "Hello world" > user.log
                  cp user.log $SD_ARTIFACTS_DIR/user.log
                  # cat /tmp/env_export
    abort:
        requires: main
        environment:
            DEPLOY_ENV: dev
        # annotations:
        #     screwdriver.cd/terminationGracePeriodSeconds: "110"
        steps:
            - init: |
                  echo $DEPLOY_ENV > test.log
                  cp test.log $SD_ARTIFACTS_DIR/test.log
                  export ENV_VAR_TEST="somevalue"
            - wait: |
                  export ENV_VAR_TEST1="anotherone"
                  sleep 2m
            - deploy: |
                  echo "deploy"
                  echo $ENV_VAR_TEST
            - teardown-step1: |
                  env
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST
                  echo "Hello world" > user.log
                  cp user.log $SD_ARTIFACTS_DIR/user.log
                  cat /tmp/env_export || echo "does not exist"
            - teardown-step2: |
                  env
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST $ENV_VAR_TEST1
                  echo "Hello world" > user.log
                  cp user.log $SD_ARTIFACTS_DIR/user.log
                  # cat /tmp/env_export
        # freezeWindows:
        #     - "* * ? * *"
    # deploy1:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy2:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy3:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy4:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy5:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy6:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy7:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 2m
    #         - deploy: echo "deploy"
    #     freezeWindows:
    #         - "* 0-1 ? * TUE"
    # deploy8:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy9:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy10:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy11:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy12:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy13:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy14:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy15:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy16:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy17:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy18:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 2m
    #         - deploy: echo "deploy"
    #     freezeWindows:
    #         - "* 0-1 ? * TUE"
    # deploy19:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy20:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy21:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy22:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy23:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy24:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    error:
        requires: main
        environment:
            DEPLOY_ENV: canary
        annotations:
            screwdriver.cd/terminationGracePeriodSeconds: 60
        steps:
            - init: |
                  echo $DEPLOY_ENV > test.log
                  cp test.log $SD_ARTIFACTS_DIR/test.log
                  export ENV_VAR_TEST="hello world"
            - echo-hello: echo hello
            - deploy: |
                  export ENV_VAR_TEST1="anotherone"
                  cat xyz.log
            - finish: sleep 1m
            - teardown-step1: |
                  printenv
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST $ENV_VAR_TEST1
                  cat /tmp/env_export || echo "does not exist"
                  # cat /tmp/env_tmp
    timeout:
        requires: main
        environment:
            DEPLOY_ENV: canary
        annotations:
            screwdriver.cd/timeout: 3
        steps:
            - init: |
                  echo $DEPLOY_ENV > test.log
                  cp test.log $SD_ARTIFACTS_DIR/test.log
                  export ENV_VAR_TEST="hello world"
            - echo-hello: echo hello
            - finish: |
                  export ENV_VAR_TEST1="anotherone"
                  sleep 5m
            - teardown-step1: |
                  printenv
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST $ENV_VAR_TEST1
                  cat /tmp/env_export || echo "does not exist"
                  # cat /tmp/env_tmp
    periodic:
        steps:
            - echo-hello: echo hello
        # annotations:
        #     screwdriver.cd/buildPeriodically: "H * * * *"
