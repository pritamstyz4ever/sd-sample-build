shared:
    image: node:lts
    # settings:
    #     slack:
    #         channels:
    #             - "sd-builds-local"
    #         statuses:
    #             - SUCCESS
    #             - FAILURE
    #             - ABORTED
    #             - QUEUED
    #             - RUNNING
# # childPipelines:
#     scmUrls:
#         - git@github.com:pritamstyz4ever/sd-build-box.git
jobs:
    main:
        requires: [~pr, ~commit]
        environment:
            RELEASE_FILES: "zstd-cli-linux.tar.gz skopeo-linux.tar.gz"
        steps:
            - s1: |
                  echo "Hello World"
                  meta set age 100
            - s2: echo "World"
            - s3: echo $PR_BRANCH_NAME
            - package: |
                  echo $RELEASE_FILES
                  # files=($RELEASE_FILES)
                  # for i in "${files[@]}"
                  # do
                  #     echo $i
                  # done
    zstd:
        requires: [~pr, ~commit]
        image: centos:centos7 
        environment:
            ZSTD_PACKAGE: zstd
            ZSTD_VERSION: 1.5.0
        steps:
            - make: |
                yum install -y epel-release
                yum install -y zlib-devel wget make gcc gcc-c++
                wget -q -O zstd-${ZSTD_VERSION}.tar.gz https://github.com/facebook/zstd/releases/download/v${ZSTD_VERSION}/zstd-${ZSTD_VERSION}.tar.gz
                tar -C . -oxzf zstd-${ZSTD_VERSION}.tar.gz
                cd zstd-${ZSTD_VERSION} && make
                chmod +x ./${ZSTD_PACKAGE}
                ./${ZSTD_PACKAGE} --version
            - store: store-cli set ./${ZSTD_PACKAGE} --type=cache --scope=event
        
    verify:
        requires: [zstd, skopeo]
        image: centos:centos7
        environment:
            RELEASE_FILES: "skopeo-linux.tar.gz zstd-cli-linux.tar.gz"
        steps:
            - get: |
                files=($RELEASE_FILES)
                for i in "${files[@]}"
                do 
                    store-cli get $i --type=cache --scope=event;
                done
                sleep 1h

    skopeo:
        requires: [~pr, ~commit]
        image: centos:centos7
        environment:
            SKOPEO_PACKAGE: skopeo
        steps:
            - make: |
                yum install -y epel-release
                yum install -y wget git make gcc gcc-c++ jq bzip2
                wget -q -O go1.15.6.tar.gz https://golang.org/dl/go1.15.6.linux-amd64.tar.gz
                tar -C /usr/local -oxzf go1.15.6.tar.gz
                export CURR_DIR=$(pwd)
                mkdir /go && cd /go
                export GOROOT=/usr/local/go && export GOPATH=/go/src && export PATH=${PATH}:${GOROOT}/bin
                git clone https://github.com/containers/${SKOPEO_PACKAGE} $GOPATH/src/github.com/containers/${SKOPEO_PACKAGE}
                cd $GOPATH/src/github.com/containers/${SKOPEO_PACKAGE} && make DISABLE_CGO=1 bin/${SKOPEO_PACKAGE}
                mv bin/${SKOPEO_PACKAGE} $CURR_DIR/ && cd $CURR_DIR/
                chmod +x ${SKOPEO_PACKAGE}
                ./${SKOPEO_PACKAGE} -v
            - store: store-cli set ${SKOPEO_PACKAGE} --type=cache --scope=event

    join:
        requires: [~pr, ~commit]
        steps:
            - s1: |
                  echo "Hello World"
                  meta set hello world
            - s2: echo "World"
            - s3: echo $PR_BRANCH_NAME
            - test-set: set
            - wait: sleep 20

    join1:
        requires: [~pr, ~commit]
        steps:
            - s1: echo "join 2"
            - wait: sleep 30

    join2:
        requires: [~pr, ~commit]
        steps:
            - s1: |
                  echo "Hello World"
                  meta set hello world
            - s2: echo "World"
            - s3: echo $PR_BRANCH_NAME
            - wait: sleep 20

    join3:
        requires: [~pr, ~commit]
        steps:
            - s1: echo "join 3"
            - wait: sleep 30

    orpublish:
        requires: [~join, ~join1]
        steps:
            - s1: echo "join or join 1"

    andpublish:
        requires: [join2, join3]
        steps:
            - s1: echo "join2 and join 3"

    frozen:
        requires: main
        steps:
            - s1: |
                  meta get age
                  meta get hello
        freezeWindows:
            - "* 10-20 ? * MON-FRI"
        # annotations:
        #     screwdriver.cd/buildPeriodically: "H * * * *"
    success:
        # requires: main
        environment:
            DEPLOY_ENV: dev
        # annotations:
        #     screwdriver.cd/terminationGracePeriodSeconds: "110"
        steps:
            - init: |
                  echo $DEPLOY_ENV > test.log
                  cp test.log $SD_ARTIFACTS_DIR/test.log
                  export ENV_VAR_TEST="somevalue"
            - wait: |
                  export ENV_VAR_TEST1="anotherone"
                  sleep 2m
            - deploy: |
                  echo "deploy"
                  echo $ENV_VAR_TEST
            - teardown-step1: |
                  env
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST
                  echo "Hello world" > user.log
                  cp user.log $SD_ARTIFACTS_DIR/user.log
                  cat /tmp/env_export || echo "does not exist"
            - teardown-step2: |
                  env
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST $ENV_VAR_TEST1
                  echo "Hello world" > user.log
                  cp user.log $SD_ARTIFACTS_DIR/user.log
                  # cat /tmp/env_export
    abort:
        # requires: main
        environment:
            DEPLOY_ENV: dev
        # annotations:
        #     screwdriver.cd/terminationGracePeriodSeconds: "110"
        steps:
            - init: |
                  echo $DEPLOY_ENV > test.log
                  cp test.log $SD_ARTIFACTS_DIR/test.log
                  export ENV_VAR_TEST="somevalue"
            - wait: |
                  export ENV_VAR_TEST1="anotherone"
                  sleep 2m
            - deploy: |
                  echo "deploy"
                  echo $ENV_VAR_TEST
            - teardown-step1: |
                  env
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST
                  echo "Hello world" > user.log
                  cp user.log $SD_ARTIFACTS_DIR/user.log
                  cat /tmp/env_export || echo "does not exist"
            - teardown-step2: |
                  env
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST $ENV_VAR_TEST1
                  echo "Hello world" > user.log
                  cp user.log $SD_ARTIFACTS_DIR/user.log
                  # cat /tmp/env_export
        # freezeWindows:
        #     - "* * ? * *"
    # deploy1:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy2:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy3:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy4:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy5:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy6:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy7:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 2m
    #         - deploy: echo "deploy"
    #     freezeWindows:
    #         - "* 0-1 ? * TUE"
    # deploy8:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy9:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy10:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy11:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy12:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy13:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy14:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy15:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy16:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy17:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy18:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 2m
    #         - deploy: echo "deploy"
    #     freezeWindows:
    #         - "* 0-1 ? * TUE"
    # deploy19:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy20:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy21:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy22:
    #     requires: main
    #     image: node:8
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"

    # deploy23:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    # deploy24:
    #     requires: main
    #     image: node:12
    #     environment:
    #         DEPLOY_ENV: dev
    #     steps:
    #         - init: |
    #             echo $DEPLOY_ENV > test.log
    #             cp test.log $SD_ARTIFACTS_DIR/test.log
    #         - wait: sleep 1m
    #         - deploy: echo "deploy"
    error:
        # requires: main
        environment:
            DEPLOY_ENV: canary
        annotations:
            screwdriver.cd/terminationGracePeriodSeconds: 60
        steps:
            - init: |
                  echo $DEPLOY_ENV > test.log
                  cp test.log $SD_ARTIFACTS_DIR/test.log
                  export ENV_VAR_TEST="hello world"
            - echo-hello: echo hello
            - deploy: |
                  export ENV_VAR_TEST1="anotherone"
                  cat xyz.log
            - finish: sleep 1m
            - teardown-step1: |
                  printenv
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST $ENV_VAR_TEST1
                  cat /tmp/env_export || echo "does not exist"
                  # cat /tmp/env_tmp
    timeout:
        # requires: main
        environment:
            DEPLOY_ENV: canary
        annotations:
            screwdriver.cd/timeout: 3
        steps:
            - init: |
                  echo $DEPLOY_ENV > test.log
                  cp test.log $SD_ARTIFACTS_DIR/test.log
                  export ENV_VAR_TEST="hello world"
            - echo-hello: echo hello
            - finish: |
                  export ENV_VAR_TEST1="anotherone"
                  sleep 5m
            - teardown-step1: |
                  printenv
                  echo $DEPLOY_ENV
                  echo $ENV_VAR_TEST $ENV_VAR_TEST1
                  cat /tmp/env_export || echo "does not exist"
                  # cat /tmp/env_tmp
    periodic:
        steps:
            - echo-hello: echo hello
        # annotations:
        #     screwdriver.cd/buildPeriodically: "H * * * *"
